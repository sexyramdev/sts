//Loop detection

import java.util.*;
class Main {

    static class Node {
        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }

    static Node head;

    public static void push(int new_data) {
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }

    static boolean detectLoop(Node h) {
        HashSet<Node> s = new HashSet<>();
        while (h != null) {
            if (s.contains(h))
                return true;
            s.add(h);
            h = h.next;
        }
        return false;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Main llist = new Main(); // Create an instance of the Main class
        for(int i=0;i<n;i++){
            int x = sc.nextInt();
            llist.push(x);
        }
        llist.head.next.next.next.next = llist.head;
        if (detectLoop(head))
            System.out.println("Loop Exists");
        else
            System.out.println("Loop doesn't exist");
    }
}

-----------------------------------------------------------------------------------------

//Iterative tower of hanoi
import java.util.*;
import java.io.*;
class TOH{
     
class Stack
{
    int capacity;
    int top;
    int array[];
}
 
Stack createStack(int capacity)
{
    Stack stack = new Stack();
    stack.capacity = capacity;
    stack.top = -1;
    stack.array = new int[capacity];
    return stack;
}
 
boolean isFull(Stack stack)
{
    return (stack.top == stack.capacity - 1);
}
 
boolean isEmpty(Stack stack)
{
    return (stack.top == -1);
}
 
void push(Stack stack, int item)
{
    if (isFull(stack))
        return;
         
    stack.array[++stack.top] = item;
}
 
int pop(Stack stack)
{
    if (isEmpty(stack))
        return Integer.MIN_VALUE;
         
    return stack.array[stack.top--];
}
 
void moveDisksBetweenTwoPoles(Stack src, Stack dest, 
                              char s, char d) 
{
    int pole1TopDisk = pop(src);
    int pole2TopDisk = pop(dest);
 
    // When pole 1 is empty
    if (pole1TopDisk == Integer.MIN_VALUE) 
    {
        push(src, pole2TopDisk);
        moveDisk(d, s, pole2TopDisk);
    }
     
    // When pole2 pole is empty
    else if (pole2TopDisk == Integer.MIN_VALUE) 
    {
        push(dest, pole1TopDisk);
        moveDisk(s, d, pole1TopDisk);
    }
     
    // When top disk of pole1 > top disk of pole2
    else if (pole1TopDisk > pole2TopDisk) 
    {
        push(src, pole1TopDisk);
        push(src, pole2TopDisk);
        moveDisk(d, s, pole2TopDisk);
    }
    // When top disk of pole1 < top disk of pole2
    else
    {
        push(dest, pole2TopDisk);
        push(dest, pole1TopDisk);
        moveDisk(s, d, pole1TopDisk);
    }
}

void moveDisk(char fromPeg, char toPeg, int disk)
{
    System.out.println("Move the disk " + disk + 
                            " from " + fromPeg + 
                              " to " + toPeg);
}

void tohIterative(int num_of_disks, Stack
                  src, Stack aux, Stack dest)
{
    int i, total_num_of_moves;
    char s = 'S', d = 'D', a = 'A';
  
    if (num_of_disks % 2 == 0)
    {
        char temp = d;
        d = a;
        a  = temp;
    }
    total_num_of_moves = (int)(Math.pow(
                         2, num_of_disks) - 1);

    for(i = num_of_disks; i >= 1; i--)
        push(src, i);
  
    for(i = 1; i <= total_num_of_moves; i++)
    {
        if (i % 3 == 1)
          moveDisksBetweenTwoPoles(src, dest, s, d);
  
        else if (i % 3 == 2)
          moveDisksBetweenTwoPoles(src, aux, s, a);
  
        else if (i % 3 == 0)
          moveDisksBetweenTwoPoles(aux, dest, a, d);
    }
}
 

public static void main(String[] args)
{
    Scanner sc = new Scanner(System.in);
    // Input: number of disks
    int num_of_disks = sc.nextInt();
    TOH ob = new TOH();
    Stack src, dest, aux;
    src = ob.createStack(num_of_disks);
    dest = ob.createStack(num_of_disks);
    aux = ob.createStack(num_of_disks);
     
    ob.tohIterative(num_of_disks, src, aux, dest);
}
}

-----------------------------------------------------------------------------------

//Priority Queue
import java.io.*;
import java.util.*;
class PriorityQueueNode<T> {
    T data;
    int priority;
    PriorityQueueNode<T> prev;
    PriorityQueueNode<T> next;

    public PriorityQueueNode(T data, int priority) {
        this.data = data;
        this.priority = priority;
    }
}

class PriorityQueue<T> {
    private PriorityQueueNode<T> head;
    private PriorityQueueNode<T> tail;

    public PriorityQueue() {
        head = null;
        tail = null;
    }

    public void insert(T data, int priority) {
        PriorityQueueNode<T> newNode = new PriorityQueueNode<>(data, priority);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else if (priority < head.priority) {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        } else {
            PriorityQueueNode<T> current = head;
            while (current.next != null && current.next.priority <= priority) {
                current = current.next;
            }
            newNode.prev = current;
            newNode.next = current.next;
            if (current.next != null) {
                current.next.prev = newNode;
            } else {
                tail = newNode;
            }
            current.next = newNode;
        }
    }

    public T delete() {
        if (head == null) {
            return null;
        }
        T data = head.data;
        head = head.next;
        if (head != null) {
            head.prev = null;
        } else {
            tail = null;
        }
        return data;
    }

    public T peek() {
        if (head == null) {
            return null;
        }
        return head.data;
    }

    public boolean isEmpty() {
        return head == null;
    }
}

public class Main {
    public static void main(String[] args) throws IOException {
        InputStreamReader inpRead = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(inpRead);
        PriorityQueue<String> priorityQueue = new PriorityQueue<>();
        int n = Integer.parseInt(br.readLine());
        for (int i = 0; i < n; i++) {
            String data = br.readLine();
            int prior = Integer.parseInt(br.readLine());
            priorityQueue.insert(data, prior);
        }

        System.out.println("Highest-priority task: " + priorityQueue.peek());
        while (!priorityQueue.isEmpty()) {
            System.out.println("Executing: " + priorityQueue.delete());
        }
    }
}

----------------------------------------------------------------------------------------------------------

//Sort without extra Space

import java.util.*;
import java.io.*;
class Main 
{
 
    static void merge(int[] arr, int beg,
                        int mid, int end,
                        int maxele) 
    {
        int i = beg;
        int j = mid + 1;
        int k = beg;
        while (i <= mid && j <= end) 
        {
            if (arr[i] % maxele <=
                arr[j] % maxele)
            {
                arr[k] = arr[k] + (arr[i]
                        % maxele) * maxele;
                k++;
                i++;
            } 
            else
            {
                arr[k] = arr[k] + 
                        (arr[j] % maxele)
                        * maxele;
                k++;
                j++;
            }
        }
        while (i <= mid) 
        {
            arr[k] = arr[k] + (arr[i]
                    % maxele) * maxele;
            k++;
            i++;
        }
        while (j <= end) 
        {
            arr[k] = arr[k] + (arr[j]
                    % maxele) * maxele;
            k++;
            j++;
        }
 
        
        for (i = beg; i <= end; i++)
        {
            arr[i] = arr[i] / maxele;
        }
    }
 
    
    static void mergeSortRec(int[] arr, int beg,
            int end, int maxele) 
    {
        if (beg < end)
        {
            int mid = (beg + end) / 2;
            mergeSortRec(arr, beg,
                        mid, maxele);
            mergeSortRec(arr, mid + 1,
                        end, maxele);
            merge(arr, beg, mid,
                    end, maxele);
        }
    }
    static void mergeSort(int[] arr, int n) 
    {
        int maxele = Arrays.stream(arr).max().getAsInt() + 1;
        mergeSortRec(arr, 0, n - 1, maxele);
    }
 
     
    public static void main(String[] args)
    {
        
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            int x = sc.nextInt();
            arr[i] = x;
        }
        mergeSort(arr, n);
 
        System.out.println("Sorted array ");
        for (int i = 0; i < n; i++) 
        {
            System.out.print(arr[i] + " ");
        }
    }
}

//Second way
import java.util.LinkedList;
import java.util.Queue;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;

public class Main {
    private static void sortQueue(Queue<Integer> queue) {
        int n = queue.size();
        for (int i = 0; i < n; i++) {
            int minIndex = -1;
            int minValue = Integer.MAX_VALUE;
            for (int j = 0; j < n; j++) {
                int currValue = queue.poll();

                if (currValue < minValue && j < (n - i)) {
                    minValue = currValue;
                    minIndex = j;
                }
                queue.add(currValue);
            }
            for (int j = 0; j < n; j++) {
                int currValue = queue.poll();
                if (j != minIndex) {
                    queue.add(currValue);
                }
            }
            queue.add(minValue);
        }
        for (Integer i : queue) {
            System.out.print(i + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) throws IOException {
        InputStreamReader inpRead = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(inpRead);
        Queue<Integer> q1 = new LinkedList<>();
        int n = Integer.parseInt(br.readLine());
        int el;
        for (int i = 0; i < n; i++) {
            el = Integer.parseInt(br.readLine());
            q1.add(el);
        }
        sortQueue(q1);
    }
}

------------------------------------------------------------------------------------

//Minimum Stack
import java.util.*;
import java.io.*;
class Main{
 Stack<Integer> stack; // Stack to store elements
 Stack<Integer> minStack; // Stack to track minimum elements
 public Main() {
 stack = new Stack<>();
 minStack = new Stack<>();
 }
 public void push(int element) {
 stack.push(element);
 if (minStack.isEmpty() || element 
<= minStack.peek()) {
 minStack.push(element); // Push the element onto the minimum stack
 }
 }
 public void pop() {
 if (!stack.isEmpty()) {
 int poppedElement = stack.pop(); 
// Pop from the main stack
 // If the popped element is the current minimum, pop from the minimum stack
 if (poppedElement == 
minStack.peek()) {
 minStack.pop();
 }
 }
 }
 public int top() {
 if (!stack.isEmpty()) {
 return stack.peek(); // Return the top element of the main stack
 }
 // Stack is empty, return -1 or throw an exception as desired
 return -1;
 }
public int getMin() {
 if (!minStack.isEmpty()) {
 return minStack.peek(); // Return the minimum element from the minimum stack
 }
 // Stack is empty, return -1 or throw an exception as desired
 return -1;
 }
 public static void main(String[] args) 
{
 Main stack = new Main();
 // Push some elements onto the stack
    Scanner sc= new Scanner(System.in);
    int n= sc.nextInt();
    for(int i=0;i<n;i++)
    {
        int el=sc.nextInt();
        stack.push(el);
    }
 
// Retrieve and print the minimum element
 int minElement = stack.getMin();
 System.out.println("Minimum Element: " + minElement); // Output: Minimum Element: 1
 // Pop an element from the stack
 stack.pop();
 // Retrieve and print the top element
 int topElement = stack.top();
 System.out.println("Top Element: " 
+ topElement); // Output: Top Element: 7
 // After pop
 int newMinElement = stack.getMin();
 System.out.println("After Pop New Minimum Element: " + newMinElement);
 }
}
}

-----------------------------------------------------------------------------------------

//Max Sliding Window
import java.util.*;

class TUF {
    public static int[] maxSlidingWindow(int[] a, int k) {
        int n = a.length;
        int[] r = new int[n - k + 1];
        int ri = 0;
        // store index
        Deque<Integer> q = new ArrayDeque<>();
        for (int i = 0; i < a.length; i++) {
            // remove numbers out of range k
            if (!q.isEmpty() && q.peek() == i - k) {
                q.poll();
            }
            // remove smaller numbers in k range as they are useless
            while (!q.isEmpty() && a[q.peekLast()] < a[i]) {
                q.pollLast();
            }

            q.offer(i);
            if (i >= k - 1) {
                r[ri++] = a[q.peek()];
            }
        }
        return r;
    }

    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the size of the array: ");
        int n = scanner.nextInt();
        System.out.print("Enter the sliding window size: ");
        int k = scanner.nextInt();
        int[] arr = new int[n];
        System.out.println("Enter the array elements:");
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }



        int[] ans = maxSlidingWindow(arr, k);
        System.out.println("Maximum element in every " + k + " window:");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + " ");
        }
    }
}


-----------------------------------------------------------------------------------------------

//StockSpan 


import java.util.*; 
 
public class Main { 
    public static int[] cal(int[] prices) { 
        int n = prices.length; 
        int[] span = new int[n]; 
        Stack<Integer> s = new Stack<>(); 
        for (int i = 0; i < n; i++) { 
            while (!s.isEmpty() && prices[i] >= prices[s.peek()]) { 
                s.pop(); 
            } 
 
            if (s.isEmpty()) { 
                span[i] = i + 1; 
            } else { 
                span[i] = i - s.peek(); 
            } 
            s.push(i); 
 
        } 
        return span; 
 
    } 
 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
        int n = sc.nextInt(); 
        int[] prices = new int[n]; 
        for (int i = 0; i < n; i++) { 
            prices[i] = sc.nextInt(); 
        } 
        int span[] = cal(prices); 
        for (int s : span) { 
            System.out.print(s + " "); 
        } 
    } 
} 

-------------------------------------------------------------------------------------------------


//Segregate Even & Odd 

import java.util.*; 
 
class Node{ 
    int data; 
    Node next; 
 
    Node(int data){ 
        this.data=data; 
        this.next=null; 
    } 
} 
 
class Main{ 
    static Node seg(Node head){ 
        Node even =new Node(0), odd =new Node(0); 
        Node evenTail=even ,oddtail=odd; 
        while(head!= null){ 
            if(head.data%2==0){ 
                evenTail=evenTail.next=head; 
            } 
            else{ 
                oddtail=oddtail.next=head; 
 
            } 
            head= head.next; 
        } 
        evenTail.next=odd.next; 
        oddtail.next=null; 
        return even.next; 
    } 
 
    static void print(Node head){ 
        while(head!=null){ 
            System.out.println(head.data+" "); 
            head=head.next; 
        } 
        System.out.println(); 
    } 
 
    public static void main(String [] args){ 
        Scanner sc =new Scanner(System.in); 
        System.out.println("Enter the number of the element in the linked list "); 
        int n=sc.nextInt(); 
        Node head = new Node(0); 
        Node tail = head ; 
        for (int i=0;i<n;i++){ 
            tail= tail.next= new Node(sc.nextInt()); 
        } 
        System.out.println("Original Linkedlist "); 
        print(head.next); 
         
        Node seglist= seg(head.next); 
        System.out.println("Linkedlist after segmentation"); 
        print(seglist); 
 
    } 
} 
--------------------------------------------------------------------------------------

//The Celebrity Problem
import java.util.*; 
public class Main{ 
    public static int celebritySolution(int[][] mat) { 
        Stack<Integer> stk = new Stack<>(); 
        for(int i=0;i<mat.length;i++) { 
            stk.push(i); 
        } 
        while(stk.size() > 1) { 
            int col = stk.pop(); 
            int row = stk.pop(); 
            if(mat[row][col] == 1) 
     { 
                stk.push(col);  
            }  
    else { 
                stk.push(row);  
            } 
        } 
        int x = stk.pop(); 
        for(int j=0;j<mat.length;j++) { 
            if(j == x) continue; 
            if(mat[x][j] == 1) { 
                return -1; 
            } 
        } 
         
        for(int i=0;i<mat.length;i++) { 
            if(i == x) continue; 
            if(mat[i][x] == 0) { 
                return -1; 
            } 
        } 
        return x; 
    } 
    public static void main(String[] args) { 
        Scanner sc=new Scanner(System.in); 
        int n=sc.nextInt(); 
        int matrix[][]=new int[n][n]; 
        for(int i=0;i<n;i++) 
        { 
            for(int j=0;j<n;j++) 
            { 
                matrix[i][j]=sc.nextInt(); 
            } 
        } 
        int res = celebritySolution(matrix); 
        if(res == -1) { 
            System.out.println("There is no celebrity in the party"); 
        } else { 
            System.out.println(res + " is the celebrity in the party"); 
        } 
    } 
}

------------------------------------------------------------------------------------------

//Stack Permutation 

import java.util.*; 
class Main { 
    static Boolean check(int ip[], int op[], int n){ 
        Stack<Integer> s = new Stack<Integer>(); 
        int j = 0; 
        for (int i = 0; i < n; i++) { 
            s.push(ip[i]); 
            while (!s.isEmpty() && s.peek() == op[j]) { 
                s.pop(); 
                j++; 
            } 
        } 
        if (s.isEmpty()) 
            return true; 
        return false; 
    } 
         
    public static void main(String args[]){ 
        Scanner sc=new Scanner (System.in); 
        int n=sc.nextInt(); 
        int input[]=new int[n]; 
        int output[]=new int[n]; 
        for(int i=0;i<n;i++) 
                input[i]=sc.nextInt(); 
        for(int i=0;i<n;i++) 
                output[i]=sc.nextInt(); 
        if (check(input, output, n)) 
            System.out.println("Yes"); 
        else 
            System.out.println("Not Possible"); 
    } 
}
------------------------------------------------------------------------------------------

//Bitonic Sort


import java.util.*;

class Main {
    static class Node {
        int data;
        Node next;
        Node prev;
    }

    static Node sort(Node head) {
        if (head == null || head.next == null)
            return head;
        Node front = head;
        Node last = head;
        Node res = new Node();
        Node resEnd = res;
        Node next;
        while (last.next != null)
            last = last.next;

        while (front != last) {
            if (last.data <= front.data) {
                resEnd.next = last;
                next = last.prev;
                last.prev.next = null;
                last.prev = resEnd;
                last = next;
                resEnd = resEnd.next;
            } else {
                resEnd.next = front;
                next = front.next;
                front.next = null;
                front.prev = resEnd;
                front = next;
                resEnd = resEnd.next;
            }
        }

        resEnd.next = front;
        front.prev = resEnd;
        return res.next;
    }

    static Node push(Node head_ref, int new_data) {
        Node new_node = new Node();
        new_node.data = new_data;
        new_node.prev = null;
        new_node.next = head_ref;
        if (head_ref != null)
            head_ref.prev = new_node;
        head_ref = new_node;
        return head_ref;
    }

    static void printList(Node head) {
        if (head == null)
            System.out.println("Doubly Linked list is empty");
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
    }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Node head = null;

        for (int i = 0; i < n; i++) {
            int m = sc.nextInt();
            head = push(head, m);
        }

        head = sort(head);
        System.out.println("After sorting:");
        printList(head);
    }
}

------------------------------------------------------------------------------
//Merge sort for dll


import java.util.*;

class Node{
    Node next,prev;
    int data;
    Node(int d){
        data = d;
        prev = next =null;
    }
}
class Main{
    Node head;
    void push(int new_data){
        Node new_node = new Node(new_data);
        if(head == null) head=new_node;
        else{
            Node last = head;
            while(last.next!=null){
                last=last.next;
            }
            last.next =new_node;
            new_node.prev = last;
        }
    }

    void printlist(Node node){
        while(node != null){
            System.out.print(node.data+" ");
            node= node.next;
        }
    }

    Node merge(Node first,Node second){
        if(first == null) return second;
        if(second == null) return first;
        if(first.data < second.data){
            first.next = merge(first.next,second);
            first.next.prev = first;
            first.prev = null;
            return first;
        }
        else{
            second.next = merge(first,second.next);
            second.next.prev = second;
            second.prev = null;
            return second;
        }
    }

    Node mergesort(Node node){
        if(node==null || node.next==null) return node;
        Node second = split(node);
        node = mergesort(node);
        second = mergesort(second);

        return merge(node,second);
    }

    Node split(Node node){
        Node fast = node, slow =node;
        while(fast.next!=null && fast.next.next!=null){
            fast = fast.next.next;
            slow = slow.next;
        }
        Node temp =slow.next;
        slow.next = null;
        return temp;
    }

    public static void main(String args[]){
        Main list = new Main();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i = 0 ;i<n;i++){
            list.push(sc.nextInt());
        }
        Node node = list.mergesort(list.head);
        list.printlist(node);
    }
}




